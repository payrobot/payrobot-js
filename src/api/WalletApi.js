/**
 * Payrobot
 * # Introduction Accept, store, send or forward Bitcoin, Litecoin and Bitcoin Cash for your website or app and protect your privacy.  Supported crytocurrencies:   * BTC Bitcoin   * LTC Litecoin   * BCH Bitcoin Cash   ## Benefits    * **Anonymous** No personal details are required and transactions are mixed among all payments. You can forward your payments so as soon payrobot.io receives it forwards it to another address under your control.      * **No Registration** No registration, sign-up, application or form required to use payrobot.io      * **Easy Integration** Integrate your web / app through our simple RESTful API, you can accept payments with just one line of code!      * **Instant Payment Notification** Our servers notify your web / app the status of your payments. No polling, daemons or cronjobs required on your side!      * **Secure** Payrobot.io works with SSL and bank-level security protocols. Your transactions are safe!   ## Features **Payment Forward** Generate one-time addresses to recieve payments. Payrobot will notify your web /app through callbacks (webhooks) the status of the payment. As soon as it's confirmed the payment is forwarded to your desired address.  **Wallet** Receive, send payments and store your coins in a secure, private and anonymous wallet. All events are notified to your web / app through callbacks (webhooks). You can generate wallets with just one line of code without registration or further information  ## Fees **Only 0.90% per inbound transaction** (receive payments), NO HIDDEN FEES. All outbound transactions (send funds) are totally free.  Minimum fees applies, therefore the largest amount is going to be considered as fee either: `(inboundAmount*feePct)` or `the minimum fee`  **Inbound Fees (Receive payments)**    - `Bitcoin` 0.90% *(Minimum fee 0.00005 BTC)*   - `Litecoin` 0.90% *(Minimum fee 0.0005 LTC)*   - `Bitcoin Cash` 0.90% *(Minimum fee 0.0005 BCH)*     **Outbound Fees (Send funds)**    - `Bitcoin` 0.00%   - `Litecoin` 0.00%   - `Bitcoin Cash` 0.00%   ## Rate Limit To guarantee the good performance of the service and its fair use. The API is **limited to receiving 120 requests per minute per IP**, which is sufficient for most use cases.  Payrobot.io is asynchronous in most API methods to communicate with your application through callbacks (webhooks), thus reducing unnecessary calls to the service.  **If the limit is exceeded, the IP will be banned for 1 minute.**  If you require an upper limit for your application, do not hesitate to contact us  ## Considerations    * Amounts in responses are expresed as `strings`      * Wallets are not multi-currency, you have to create a different wallet per cryptocurrency (You can't store Litecoin in a Bitcoin wallet and vice-versa)      * Payment forwarding has to be of the same type of currency (You can't forward a Bitcoin Cash payment to a Bitcoin address and vice-versa)    
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@payrobot.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Wallet from '../model/Wallet';
import WalletCreationInfo from '../model/WalletCreationInfo';
import WalletHistory from '../model/WalletHistory';
import WalletSendRequest from '../model/WalletSendRequest';

/**
* Wallet service.
* @module api/WalletApi
* @version 1.0
*/
export default class WalletApi {

    /**
    * Constructs a new WalletApi. 
    * @alias module:api/WalletApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWallet operation.
     * @callback module:api/WalletApi~createWalletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletCreationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new wallet
     * Creates a new wallet where you can receive, store and send funds for your web or app.  --- ## Important This method returns your `Wallet Passphrase`, it will be required when you send funds from your wallet. **Please keep it safe and private** 
     * @param {module:model/String} currency Object Currency:   * `btc`: Bitcoin   * `ltc`: Litecoin   * `bch`: Bitcoin Cash 
     * @param {module:api/WalletApi~createWalletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletCreationInfo}
     */
    createWallet(currency, callback) {
      let postBody = null;
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling createWallet");
      }

      let pathParams = {
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletCreationInfo;
      return this.apiClient.callApi(
        '/{currency}/wallets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWalletSendRequest operation.
     * @callback module:api/WalletApi~createWalletSendRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletSendRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send funds from a wallet
     * Sends funds from a wallet to one or multiple addresses.  --- ## Required Authorization Token This transaction requires an authorization `token` which is the result of the `sha-256` hash of the following string:        walletId~destination~seed~walletPassphrase    **For example**  Considering the following example values for the token:   - `walletId` 9df3f909-088d-4724-b34f-9a587c5ccc15   - `destination`     [{\"address\":\"bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\",\"amount\":0.01},{\"address\":\"bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\",\"amount\":0.056}]     - `seed` 758748394   - `walletPassphrase` **Note: this was provided when you created the wallet** OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    The resulting string, previous to hash is::        9df3f909-088d-4724-b34f-9a587c5ccc15~[{\"address\":\"bc1q5defveu0acrf87m3huwxjq6pqaszdjf3d4ej9y\",\"amount\":0.01},{\"address\":\"bc1qs59a7e23zpjm0znteytrxvj839dlp205e50zch\",\"amount\":0.056}]~758748394~OHh6IIININmfmjGGsxlBBft2ch61VncaPscsp295h2ULx9xPY07Jom3d5cBifgoW    Finally after applying `sha-256` hash, we obtain the required `token`:        804ca9457b0fe3e4d243fe9e39e760ff1f287491ae8e79d015f92f7c6c96d7b1       --- ## Important    * Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.    * Transaction is limited to `25` destination addresses per request      * Tx Hash is provided only through the callback      * Confirmed send requests information is `DELETED` after `3 days` of being confirmed    --- ## Minimum Send Amounts     * `Bitcoin`: 0.0001 BTC   * `Litecoin`: 0.001 LTC   * `Bitcoin Cash`: 0.001 BCH    --- ## Callback Send requests are commonly queued, optionally you can specify a callback to get your web / app notified as soon as the request has been fully broadcasted to the Network.  The callback sent to your callback url is a **POST** request with the following parameters:       *Example:*      currency:     \"BTC\"     walletId:     \"698fd3f6-5482-4798-8a46-6732af440616\"     requestId:    \"123fd3f6-9078-5790-4f40-6932bf440120\"     timestamp:    1577179288     lastupdate:   1577179388     amount:       \"0.01\"     callback:     \"https://callback-url.com\"     destination:  '[{\"address\": \"bc1qf6ss0qtdn5q42...\"                   \"amount\": \"0.01\"}]'     txid:         \"2cdac43e92e65cb428e3ed992bcf61347...\"     status:       0 
     * @param {module:model/String} currency Object Currency:   * `btc`: Bitcoin   * `ltc`: Litecoin   * `bch`: Bitcoin Cash 
     * @param {String} walletId Wallet where funds to send are stored
     * @param {String} destination JSON formatted array with all the destination addres(es) and the amount(s) to send\\ `[{\"address\":\"desired-destination-address\",\"amount\":X.XXXXXXXX}, ...]` 
     * @param {String} seed Unique random string generated by your web/app. **IT MUST BE UNIQUE PER TRANSACTION PER WALLET**
     * @param {String} token SHA-256 hash of the concatenated string (substituting with the proper data):\\ `walletId~destination~seed~walletPassphrase` 
     * @param {Object} opts Optional parameters
     * @param {String} opts.callback Optional callback to notify your web / app as soon as the send request has been fully broadcasted to the Network
     * @param {module:api/WalletApi~createWalletSendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletSendRequest}
     */
    createWalletSendRequest(currency, walletId, destination, seed, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling createWalletSendRequest");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createWalletSendRequest");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling createWalletSendRequest");
      }
      // verify the required parameter 'seed' is set
      if (seed === undefined || seed === null) {
        throw new Error("Missing the required parameter 'seed' when calling createWalletSendRequest");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createWalletSendRequest");
      }

      let pathParams = {
        'currency': currency,
        'walletId': walletId
      };
      let queryParams = {
        'destination': destination,
        'seed': seed,
        'token': token,
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletSendRequest;
      return this.apiClient.callApi(
        '/{currency}/wallets/{walletId}/send-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWallet operation.
     * @callback module:api/WalletApi~getWalletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wallet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wallet information
     * Gets detailed information from a Wallet
     * @param {module:model/String} currency Object Currency:   * `btc`: Bitcoin   * `ltc`: Litecoin   * `bch`: Bitcoin Cash 
     * @param {String} walletId ID of the desired Wallet
     * @param {module:api/WalletApi~getWalletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wallet}
     */
    getWallet(currency, walletId, callback) {
      let postBody = null;
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getWallet");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWallet");
      }

      let pathParams = {
        'currency': currency,
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Wallet;
      return this.apiClient.callApi(
        '/{currency}/wallets/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletHistory operation.
     * @callback module:api/WalletApi~getWalletHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last transactions of wallet
     * Gets last 100 transactions of the wallet
     * @param {module:model/String} currency Object Currency:   * `btc`: Bitcoin   * `ltc`: Litecoin   * `bch`: Bitcoin Cash 
     * @param {String} walletId ID of the desired Wallet
     * @param {module:api/WalletApi~getWalletHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletHistory}
     */
    getWalletHistory(currency, walletId, callback) {
      let postBody = null;
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getWalletHistory");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletHistory");
      }

      let pathParams = {
        'currency': currency,
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletHistory;
      return this.apiClient.callApi(
        '/{currency}/wallets/{walletId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletSendRequest operation.
     * @callback module:api/WalletApi~getWalletSendRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletSendRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain information of a send request
     * Obtains detailed information about a send request
     * @param {module:model/String} currency Object Currency:   * `btc`: Bitcoin   * `ltc`: Litecoin   * `bch`: Bitcoin Cash 
     * @param {String} walletId Wallet where funds to send are stored
     * @param {String} requestId Send Request ID
     * @param {module:api/WalletApi~getWalletSendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletSendRequest}
     */
    getWalletSendRequest(currency, walletId, requestId, callback) {
      let postBody = null;
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getWalletSendRequest");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletSendRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getWalletSendRequest");
      }

      let pathParams = {
        'currency': currency,
        'walletId': walletId,
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletSendRequest;
      return this.apiClient.callApi(
        '/{currency}/wallets/{walletId}/send-requests/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
